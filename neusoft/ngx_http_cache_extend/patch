Index: original/src/http/ngx_http_upstream.c
===================================================================
--- original/src/http/ngx_http_upstream.c	(revision 335)
+++ original/src/http/ngx_http_upstream.c	(working copy)
@@ -2178,6 +2178,13 @@
 
     default: /* NGX_OK */
 
+#if (NGX_HTTP_CACHE_EXTEND)
+        if (ngx_http_proxy_test_content_type(r) != NGX_OK) {
+            u->cacheable = 0;
+            break;
+        }
+#endif
+
         if (u->cache_status == NGX_HTTP_CACHE_BYPASS) {
 
             r->cache->min_uses = u->conf->cache_min_uses;
Index: original/src/http/ngx_http_upstream.h
===================================================================
--- original/src/http/ngx_http_upstream.h	(revision 335)
+++ original/src/http/ngx_http_upstream.h	(working copy)
@@ -366,4 +366,9 @@
 extern ngx_conf_bitmask_t  ngx_http_upstream_ignore_headers_masks[];
 
 
+#if (NGX_HTTP_CACHE_EXTEND)
+extern ngx_int_t
+ngx_http_proxy_test_content_type(ngx_http_request_t *r);
+#endif
+
 #endif /* _NGX_HTTP_UPSTREAM_H_INCLUDED_ */
Index: original/src/http/modules/ngx_http_proxy_module.c
===================================================================
--- original/src/http/modules/ngx_http_proxy_module.c	(revision 335)
+++ original/src/http/modules/ngx_http_proxy_module.c	(working copy)
@@ -68,6 +68,11 @@
     ngx_http_complex_value_t       cache_key;
 #endif
 
+#if (NGX_HTTP_CACHE_EXTEND)
+    ngx_array_t                   *types_keys;
+    ngx_hash_t                     types;
+#endif
+
     ngx_http_proxy_vars_t          vars;
 
     ngx_flag_t                     redirect;
@@ -168,6 +173,10 @@
 #endif
 static void ngx_http_proxy_set_vars(ngx_url_t *u, ngx_http_proxy_vars_t *v);
 
+#if (NGX_HTTP_CACHE_EXTEND)
+ngx_int_t
+ngx_http_proxy_test_content_type(ngx_http_request_t *r);
+#endif
 
 static ngx_conf_post_t  ngx_http_proxy_lowat_post =
     { ngx_http_proxy_lowat_check };
@@ -516,6 +525,15 @@
 
 #endif
 
+#if (NGX_HTTP_CACHE_EXTEND)
+    { ngx_string("proxy_cache_types"),
+      NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_http_types_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_proxy_loc_conf_t, types_keys),
+      NULL },
+#endif
+
       ngx_null_command
 };
 
@@ -3056,6 +3074,16 @@
         return NGX_CONF_ERROR;
     }
 
+#if (NGX_HTTP_CACHE_EXTEND)
+    if (ngx_http_merge_types(cf, &conf->types_keys, &conf->types,
+                             &prev->types_keys, &prev->types,
+                             ngx_http_html_default_types)
+        != NGX_OK)
+    {
+        return NGX_CONF_ERROR;
+    }
+#endif
+
     return NGX_CONF_OK;
 }
 
@@ -4036,3 +4064,27 @@
 
     v->uri = u->uri;
 }
+
+#if (NGX_HTTP_CACHE_EXTEND)
+ngx_int_t
+ngx_http_proxy_test_content_type(ngx_http_request_t *r)
+{
+    ngx_http_proxy_loc_conf_t  *conf;
+
+    conf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);
+
+    if (ngx_http_test_content_type(r, &conf->types) 
+            == NULL) {
+
+        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
+                "proxy cache extend: not match content types, skip caching");
+        
+        return NGX_ERROR;
+    }
+
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
+            "proxy cache extend: match content types, caching");
+    
+    return NGX_OK;
+}
+#endif
